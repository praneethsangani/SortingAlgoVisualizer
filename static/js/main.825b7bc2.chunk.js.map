{"version":3,"sources":["SortingAlgorithms/BubbleSort.js","SortingAlgorithms/MergeSortTopDown.js","SortingAlgorithms/MergeSortBottomUp.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/InsertionSort.js","SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["bubbleSort","mainArray","a","async","bars","document","getElementsByClassName","swapped","length","i","swap","style","backgroundColor","Promise","r","setTimeout","j","temp","height","mergeSortTopDown","startIndex","endIndex","tempArray","middleIdx","Math","floor","doMerge","middleIndex","mainIndex","leftIndex","rightIndex","displayAnimations","index1","index2","mergeSortBottomUp","low","high","slice","sectionSize","min","merge","quickSort","partition","partitionIndex","pivot","insertionSort","keyIndex","compareIndex","SortingVisualizer","props","state","array","isButtonDisabled","color","this","resetArray","max","push","random","setState","window","location","reload","resetBarColors","then","disableButtons","enableButtons","className","onClick","generateNewArray","disabled","map","value","idx","key","visibility","React","Component","buttons","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.825b7bc2.chunk.js","sourcesContent":["export async function bubbleSort(mainArray) {\r\n    const bars = document.getElementsByClassName('array-bar');\r\n    let swapped = false;\r\n    let length = mainArray.length;\r\n    do {\r\n        swapped = false;\r\n        for (let i = 0; i < length - 1; i++) {\r\n            if (mainArray[i] > mainArray[i + 1]) {\r\n                swap(mainArray, bars, i, i + 1);\r\n                swapped = true;\r\n            }\r\n            bars[i + 1].style.backgroundColor = 'red';\r\n            await new Promise(r => setTimeout(r, 1));\r\n            bars[i + 1].style.backgroundColor = 'darkturquoise';\r\n        }\r\n        length--;\r\n        bars[length].style.backgroundColor = 'green';\r\n    } while (swapped);\r\n    return mainArray;\r\n}\r\n\r\nfunction swap(mainArray, bars, i, j) {\r\n    let temp = mainArray[i];\r\n    mainArray[i] = mainArray[j];\r\n    mainArray[j] = temp;\r\n\r\n    temp = bars[i].style.height;\r\n    bars[i].style.height = bars[j].style.height;\r\n    bars[j].style.height = temp;\r\n\r\n    temp = bars[i].style.backgroundColor;\r\n    bars[i].style.backgroundColor = bars[j].style.backgroundColor;\r\n    bars[j].style.backgroundColor = temp;\r\n}","export async function mergeSortTopDown(mainArray, startIndex, endIndex, tempArray) {\r\n    if (startIndex === endIndex) return;\r\n    const middleIdx = Math.floor((startIndex + endIndex) / 2);\r\n    await mergeSortTopDown(tempArray, startIndex, middleIdx, mainArray);             // Split left side into subsections\r\n    await mergeSortTopDown(tempArray, middleIdx + 1, endIndex, mainArray); // Split right side into subsections\r\n    return await doMerge(mainArray, tempArray, startIndex, middleIdx, endIndex);     // Merge the subsections back together\r\n}\r\n\r\nasync function doMerge(mainArray, tempArray, startIndex, middleIndex, endIndex) {\r\n    const bars = document.getElementsByClassName('array-bar');\r\n    let mainIndex = startIndex;\r\n    let leftIndex = startIndex;\r\n    let rightIndex = middleIndex + 1;\r\n\r\n    while (leftIndex <= middleIndex && rightIndex <= endIndex) {\r\n        await displayAnimations(bars, leftIndex, rightIndex);\r\n\r\n        if (tempArray[leftIndex] <= tempArray[rightIndex]) {\r\n            mainArray[mainIndex] = tempArray[leftIndex];\r\n            bars[mainIndex++].style.height = tempArray[leftIndex++] + 'px';\r\n        } else {\r\n            mainArray[mainIndex] = tempArray[rightIndex];\r\n            bars[mainIndex++].style.height = tempArray[rightIndex++] + 'px';\r\n        }\r\n    }\r\n\r\n    while (leftIndex <= middleIndex) {\r\n        mainArray[mainIndex] = tempArray[leftIndex];\r\n        bars[mainIndex++].style.height = tempArray[leftIndex++] + 'px';\r\n\r\n    }\r\n    while (rightIndex <= endIndex) {\r\n        mainArray[mainIndex] = tempArray[rightIndex];\r\n        bars[mainIndex++].style.height = tempArray[rightIndex++] + 'px';\r\n    }\r\n\r\n    return mainArray;\r\n}\r\n\r\n// Change the color of the bars at index1 && index2\r\nasync function displayAnimations(bars, index1, index2) {\r\n    bars[index1].style.backgroundColor = 'red';\r\n    bars[index2].style.backgroundColor = 'red';\r\n    await new Promise(r => setTimeout(r, 20));\r\n    bars[index1].style.backgroundColor = 'darkturquoise';\r\n    bars[index2].style.backgroundColor = 'darkturquoise';\r\n}","export async function mergeSortBottomUp(mainArray) {\r\n    let low = 0;\r\n    let high = mainArray.length - 1;\r\n    let tempArray = mainArray.slice();\r\n\r\n    // sectionSizes of 1, 2, 4, 8, 16...\r\n    for (let sectionSize = 1; sectionSize <= high - low; sectionSize = 2 * sectionSize) {\r\n        for (let i = low; i < high; i += 2 * sectionSize) {\r\n            let startIndex = i;\r\n            let middleIndex = i + sectionSize - 1;\r\n            let endIndex = Math.min(i + 2 * sectionSize - 1, high);\r\n            await merge(mainArray, tempArray, startIndex, middleIndex, endIndex);\r\n        }\r\n    }\r\n    return mainArray;\r\n}\r\n\r\nasync function merge(mainArray, tempArray, startIndex, middleIndex, endIndex) {\r\n    const bars = document.getElementsByClassName('array-bar');\r\n    let mainIndex = startIndex;\r\n    let leftIndex = startIndex;\r\n    let rightIndex = middleIndex + 1;\r\n    while (leftIndex <= middleIndex && rightIndex <= endIndex) {\r\n        await displayAnimations(bars, leftIndex, rightIndex);\r\n        if (mainArray[leftIndex] < mainArray[rightIndex]) {\r\n            tempArray[mainIndex++] = mainArray[leftIndex++];\r\n        } else {\r\n            tempArray[mainIndex++] = mainArray[rightIndex++];\r\n        }\r\n        for (let i = startIndex; i <= endIndex; i++) {\r\n            bars[i].style.height = tempArray[i] + 'px';\r\n        }\r\n    }\r\n\r\n    while (leftIndex <= middleIndex) {\r\n        tempArray[mainIndex++] = mainArray[leftIndex++];\r\n    }\r\n\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n        mainArray[i] = tempArray[i];\r\n        bars[i].style.height = tempArray[i] + 'px';\r\n    }\r\n    return mainArray;\r\n}\r\n\r\n// Change the color of the bars at index1 && index2\r\nasync function displayAnimations(bars, index1, index2) {\r\n    bars[index1].style.backgroundColor = 'red';\r\n    bars[index2].style.backgroundColor = 'red';\r\n    await new Promise(r => setTimeout(r, 16));\r\n    bars[index1].style.backgroundColor = 'darkturquoise';\r\n    bars[index2].style.backgroundColor = 'darkturquoise';\r\n}","export async function quickSort(mainArray, low, high) {\r\n    if (low < high) {\r\n        let partitionIndex = await partition(mainArray, low, high);   // Places pivot in the correct spot\r\n        await quickSort(mainArray, low, partitionIndex - 1);    // Recursively sort the left of pivot\r\n        await quickSort(mainArray, partitionIndex + 1, high);    // Recursively sort the right of pivot\r\n    }\r\n    return mainArray;\r\n}\r\n\r\n// Uses the last element as the pivot\r\n// Places the pivot in the correct position\r\n// and all values less than the pivot on its left\r\n// and all values greater than the pivot on its right\r\nasync function partition(mainArray, low, high) {\r\n    const bars = document.getElementsByClassName('array-bar');\r\n    let pivot = mainArray[high];\r\n    // At the end of the for loop, this value will be where we swap the pivot into such that\r\n    // everything on its left is less than it and everything on its right is greater.\r\n    let partitionIndex = low;\r\n\r\n    for (let i = 0; i < low; i++) {\r\n        bars[i].style.backgroundColor = 'green';\r\n    }\r\n    bars[high].style.backgroundColor = 'yellow';\r\n    await new Promise(r => setTimeout(r, 3));\r\n\r\n    for (let j = low; j < high; j++) {\r\n        bars[j].style.backgroundColor = 'red';\r\n        bars[partitionIndex].style.backgroundColor = 'red';\r\n        await new Promise(r => setTimeout(r, 3));\r\n        if (mainArray[j] > pivot) {\r\n            bars[j].style.backgroundColor = 'darkturquoise';\r\n            bars[partitionIndex].style.backgroundColor = 'darkturquoise';\r\n        }\r\n        if (mainArray[j] <= pivot) {\r\n            bars[partitionIndex].style.backgroundColor = 'red';\r\n            await new Promise(r => setTimeout(r, 3));\r\n            swap(mainArray, bars, j, partitionIndex);\r\n            await new Promise(r => setTimeout(r, 3));\r\n            bars[j].style.backgroundColor = 'darkturquoise';\r\n            bars[partitionIndex].style.backgroundColor = 'darkturquoise';\r\n            partitionIndex++;\r\n        }\r\n    }\r\n    swap(mainArray, bars, high, partitionIndex);  // Swap the pivot into the proper place\r\n\r\n    bars[partitionIndex].style.backgroundColor = 'green';\r\n    await new Promise(r => setTimeout(r, 6));\r\n    for (let i = 0; i < low; i++) {\r\n        bars[i].style.backgroundColor = 'green';\r\n    }\r\n\r\n    return partitionIndex;\r\n}\r\n\r\nfunction swap(mainArray, bars, j, partitionIndex) {\r\n    let temp = mainArray[partitionIndex];\r\n    mainArray[partitionIndex] = mainArray[j];\r\n    mainArray[j] = temp;\r\n\r\n    temp = bars[partitionIndex].style.height;\r\n    bars[partitionIndex].style.height = bars[j].style.height;\r\n    bars[j].style.height = temp;\r\n\r\n    temp = bars[partitionIndex].style.backgroundColor;\r\n    bars[partitionIndex].style.backgroundColor = bars[j].style.backgroundColor;\r\n    bars[j].style.backgroundColor = temp;\r\n}","export async function insertionSort(mainArray) {\r\n    const bars = document.getElementsByClassName('array-bar');\r\n    for (let i = 0; i < mainArray.length; i++) {\r\n        let compareIndex = i - 1;\r\n        let keyIndex = i;\r\n\r\n        if (compareIndex < 0 || mainArray[compareIndex] <= mainArray[keyIndex]) {\r\n            bars[keyIndex].style.backgroundColor = 'red';\r\n            await new Promise(r => setTimeout(r, 5));\r\n            bars[keyIndex].style.backgroundColor = 'darkturquoise';\r\n        }\r\n\r\n        while (compareIndex >= 0 && mainArray[compareIndex] > mainArray[keyIndex]) {\r\n            bars[keyIndex].style.backgroundColor = 'red';\r\n            await new Promise(r => setTimeout(r, 5));\r\n            swap(mainArray, bars, compareIndex, keyIndex);\r\n\r\n            keyIndex = compareIndex;\r\n            compareIndex--;\r\n        }\r\n        bars[keyIndex].style.backgroundColor = 'darkturquoise';\r\n        await new Promise(r => setTimeout(r, 5));\r\n    }\r\n    return mainArray;\r\n}\r\n\r\nfunction swap(mainArray, bars, compareIndex, keyIndex) {\r\n    let temp = mainArray[keyIndex];\r\n    mainArray[keyIndex] = mainArray[compareIndex];\r\n    mainArray[compareIndex] = temp;\r\n\r\n    temp = bars[keyIndex].style.height;\r\n    bars[keyIndex].style.height = bars[compareIndex].style.height;\r\n    bars[compareIndex].style.height = temp;\r\n\r\n    temp = bars[keyIndex].style.backgroundColor;\r\n    bars[keyIndex].style.backgroundColor = bars[compareIndex].style.backgroundColor;\r\n    bars[compareIndex].style.backgroundColor = temp;\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport {bubbleSort} from '../SortingAlgorithms/BubbleSort'\r\nimport {mergeSortTopDown} from \"../SortingAlgorithms/MergeSortTopDown\";\r\nimport {mergeSortBottomUp} from \"../SortingAlgorithms/MergeSortBottomUp\";\r\nimport {quickSort} from \"../SortingAlgorithms/QuickSort\";\r\nimport {insertionSort} from \"../SortingAlgorithms/InsertionSort\";\r\n\r\nconst NUMBER_OF_BARS = 128;\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            isButtonDisabled: false,\r\n            color: 'darkturquoise',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUMBER_OF_BARS; i++) {\r\n            array.push(randomIntFromInterval(23, 600));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    generateNewArray() {\r\n        window.location.reload();\r\n    }\r\n\r\n    async resetBarColors(color) {\r\n        const bars = document.getElementsByClassName('array-bar');\r\n        for (let j = 0; j < NUMBER_OF_BARS; j++) {\r\n            bars[j].style.backgroundColor = color;\r\n        }\r\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED_MS));\r\n    }\r\n\r\n    async mergeSortTopDown() {\r\n        this.resetBarColors('darkturquoise').then(() => disableButtons());\r\n        await mergeSortTopDown(this.state.array, 0, this.state.array.length - 1, this.state.array.slice());\r\n        this.resetBarColors('green').then(() => enableButtons());\r\n    }\r\n\r\n    async mergeSortBottomUp() {\r\n        this.resetBarColors('darkturquoise').then(() => disableButtons());\r\n        await mergeSortBottomUp(this.state.array, this.state.array.slice());\r\n        this.resetBarColors('green').then(() => enableButtons());\r\n    }\r\n\r\n\r\n    async quickSort() {\r\n        this.resetBarColors('darkturquoise').then(() => disableButtons());\r\n        await quickSort(this.state.array, 0, this.state.array.length - 1);\r\n        this.resetBarColors('green').then(() => enableButtons());\r\n    }\r\n\r\n    async insertionSort() {\r\n        this.resetBarColors('darkturquoise').then(() => disableButtons());\r\n        await insertionSort(this.state.array);\r\n        this.resetBarColors('green').then(() => enableButtons());\r\n    }\r\n\r\n    async bubbleSort() {\r\n        this.resetBarColors('darkturquoise').then(() => disableButtons());\r\n        await bubbleSort(this.state.array);\r\n        this.resetBarColors('green').then(() => enableButtons());\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className=\"main\">\r\n                <div className={\"buttons\"}>\r\n                    <button onClick={() => this.generateNewArray()} className={\"button\"}\r\n                            style={{color: this.state.color}}>Generate New Array\r\n                    </button>\r\n                    <button onClick={() => this.mergeSortTopDown()} className={\"button\"}\r\n                            disabled={this.state.isButtonDisabled}\r\n                            style={{color: this.state.color}}>Merge Sort (Top Down)\r\n                    </button>\r\n                    <button onClick={() => this.mergeSortBottomUp()} className={\"button\"}\r\n                            disabled={this.state.isButtonDisabled}\r\n                            style={{color: this.state.color}}>Merge Sort (Bottom Up)\r\n                    </button>\r\n                    <button onClick={() => this.quickSort()} className={\"button\"}\r\n                            disabled={this.state.isButtonDisabled}\r\n                            style={{color: this.state.color}}>Quick Sort\r\n                    </button>\r\n                    <button onClick={() => this.insertionSort()} className={\"button\"}\r\n                            disabled={this.state.isButtonDisabled}\r\n                            style={{color: this.state.color}}>Insertion Sort\r\n                    </button>\r\n                    <button onClick={() => this.bubbleSort()} className={\"button\"}\r\n                            disabled={this.state.isButtonDisabled}\r\n                            style={{color: this.state.color}}>Bubble Sort\r\n                    </button>\r\n                </div>\r\n                <div className={\"array-container\"}>\r\n                    {array.map((value, idx) => (\r\n                        <div className=\"array-bar\" key={idx}\r\n                             style={{height: `${value}px`}}><p className={'barValue'}\r\n                                                               style={{visibility: 'hidden'}}>{value}</p></div>\r\n                    ))}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction disableButtons() {\r\n    const buttons = document.getElementsByClassName(\"button\");\r\n    for (let i = 1; i < buttons.length; i++) {\r\n        buttons[i].disabled = true;\r\n        buttons[i].style.color = 'red';\r\n    }\r\n}\r\n\r\nfunction enableButtons() {\r\n    const buttons = document.getElementsByClassName(\"button\");\r\n    for (let i = 1; i < buttons.length; i++) {\r\n        buttons[i].disabled = false;\r\n        buttons[i].style.color = 'darkturquoise';\r\n    }\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer></SortingVisualizer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}